Given an array of integers nums sorted in non-decreasing order, find the starting and ending position of a given target value.

If target is not found in the array, return [-1, -1].

You must write an algorithm with O(log n) runtime complexity.

 

Example 1:

Input: nums = [5,7,7,8,8,10], target = 8
Output: [3,4]
Example 2:

Input: nums = [5,7,7,8,8,10], target = 6
Output: [-1,-1]
Example 3:

Input: nums = [], target = 0
Output: [-1,-1]
 

Constraints:

0 <= nums.length <= 105
-109 <= nums[i] <= 109
nums is a non-decreasing array.
-109 <= target <= 109

Solution:
class Solution {
public:
    int firstpos(vector<int>& nums, int target)
    {
        int index=-1;
        int start=0;
        int end=nums.size()-1;
        while(start<=end)
        {
            int mid=start+(end-start)/2;
            if(nums[mid]>=target)
            {
                end=mid-1;
            }
            else
            {
                start=mid+1;
            }
            if(nums[mid]==target)index=mid;
        }
        return index;
    }
    int lastpos(vector<int>& nums, int target)
    {
        int index=-1;
        int start=0;
        int end=nums.size()-1;
        while(start<=end)
        {
            int mid=start+(end-start)/2;
            if(nums[mid]<=target)
            {
                start=mid+1;
            }
            else
            {
                end=mid-1;
            }
            if(nums[mid]==target)index=mid;
        }
        return index;
    }
    vector<int> searchRange(vector<int>& nums, int target) {
        vector<int>res;
        int first=firstpos(nums,target);
        int last=lastpos(nums,target);
        res.push_back(first);
        res.push_back(last);
        return res;
        
    }
};
