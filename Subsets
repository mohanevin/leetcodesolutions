Given an integer array nums of unique elements, return all possible subsets (the power set).

The solution set must not contain duplicate subsets. Return the solution in any order.

 

Example 1:

Input: nums = [1,2,3]
Output: [[],[1],[2],[1,2],[3],[1,3],[2,3],[1,2,3]]
Example 2:

Input: nums = [0]
Output: [[],[0]]
 

Constraints:

1 <= nums.length <= 10
-10 <= nums[i] <= 10
All the numbers of nums are unique.


Solution:

class Solution {
public:
    void generateSubsets(int index,vector<int>& nums,vector<int>& temp,vector<vector<int>>& res)
    {
        if(index>=nums.size())
        {
            res.push_back(temp);
            return;
        }
        temp.push_back(nums[index]);
        generateSubsets(index+1,nums,temp,res);
        temp.pop_back();
        generateSubsets(index+1,nums,temp,res);
    }
    vector<vector<int>> subsets(vector<int>& nums) {
        int index=0;
        vector<vector<int>>res;
        vector<int>temp;
        generateSubsets(index,nums,temp,res);
        return res;
    }
};
