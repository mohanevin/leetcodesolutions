Given an integer array of size n, find all elements that appear more than ⌊ n/3 ⌋ times.

 

Example 1:

Input: nums = [3,2,3]
Output: [3]
Example 2:

Input: nums = [1]
Output: [1]
Example 3:

Input: nums = [1,2]
Output: [1,2]
 

Constraints:

1 <= nums.length <= 5 * 104
-109 <= nums[i] <= 109
 

Follow up: Could you solve the problem in linear time and in O(1) space?


Solution:

class Solution {
public:
    vector<int> majorityElement(vector<int>& nums) {
        int c1=0,c2=0,num1=-1,num2=-1;
        for(auto i :nums)
        {
            if(i==num1)
                c1++;
            else if(i==num2)
                c2++;
            else if(c1==0)
            {
               num1=i;
                c1=1;
            }
            else if(c2==0)
            {
                num2=i;
                c2=1;
            }
            else
            {
                c1--;
                c2--;
            }
                
        }
        c1=c2=0;
        for(auto i:nums)
        {
            if(i==num1)c1++;
            else if(i==num2)c2++;
        }
        
        vector<int>ans;
        if(c1>nums.size()/3)
            ans.push_back(num1);
        if(c2>nums.size()/3)
            ans.push_back(num2);
        return ans;
        
        
    }
};
