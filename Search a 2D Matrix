Write an efficient algorithm that searches for a value target in an m x n integer matrix matrix. This matrix has the following properties:

Integers in each row are sorted from left to right.
The first integer of each row is greater than the last integer of the previous row.
 

Example 1:


Input: matrix = [[1,3,5,7],[10,11,16,20],[23,30,34,60]], target = 3
Output: true
Example 2:


Input: matrix = [[1,3,5,7],[10,11,16,20],[23,30,34,60]], target = 13
Output: false
 

Constraints:

m == matrix.length
n == matrix[i].length
1 <= m, n <= 100
-104 <= matrix[i][j], target <= 104

Solution:

class Solution {
public:
    bool binarySearch(vector<int> arr,int target)
    {
        int l=0,r=arr.size()-1,mid;
        while(l<=r)
        {
            mid=(l+r)/2;
            if(arr[mid]==target)
            {
                return true;
            }
            else if(arr[mid]<target)
            {
                l=mid+1;
                
            }
            else
            {
                r=mid-1;
            }
            
        }
        return false;
    }
    bool searchMatrix(vector<vector<int>>& matrix, int target) {
        bool flag=false;
        for(auto i:matrix)
        {
            flag=binarySearch(i,target);
            if(flag==true)
                return true;
        }
        return flag;
    }
};
